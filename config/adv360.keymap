/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp N1       &kp N2            &kp N3          &kp N4          &kp N5  &tog 1                                                                        &mo 3      &kp N6  &kp N7           &kp N8           &kp N9             &kp N0               &kp BACKSLASH
&kp TAB    &kp Q        &kp W             &kp E           &kp R           &kp T   &none                                                                         &none      &kp Y   &kp U            &kp I            &kp O              &kp P                &kp MINUS
&kp LCTRL  &hm LCTRL A  &hm LEFT_SHIFT S  &hm LEFT_ALT D  &hm LEFT_GUI F  &kp G   &mo 4          &kp LEFT_COMMAND  &kp LALT       &kp RIGHT_ALT  &kp RIGHT_GUI  &none      &kp H   &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RIGHT_SHIFT L  &hm RCTRL SEMICOLON  &hm LCTRL SQT
&kp LSHFT  &kp Z        &kp X             &kp C           &kp V           &kp B                                    &mo 1          &mo 2                                    &kp N   &kp M            &kp COMMA        &kp PERIOD         &kp FSLH             &kp RSHFT
&mo 1      &kp GRAVE    &tog 2            &kp LEFT        &kp RIGHT               &kp BACKSPACE  &lt 1 EQUAL       &kp LCTRL      &kp LCTRL      &lt 1 ENTER    &kp SPACE          &kp UP_ARROW     &kp DOWN_ARROW   &kp LBKT           &kp RBKT             &mo 1
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5        &trans                                                 &mo 3   &kp N6        &kp KP_NUM    &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q         &kp W         &kp E         &kp R         &kp T         &none                                                  &none   &kp Y         &kp KP_N7     &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &none   &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none   &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0     &kp SQT
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V         &kp B                            &kp HOME      &kp PG_UP                     &kp N         &kp KP_N1     &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE     &kp CAPS      &kp LEFT      &kp RIGHT                   &trans  &kp EQUAL  &kp END       &kp PG_DN  &kp ENTER  &trans                &kp UP        &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2           &kp F3       &kp F4    &kp F5      &kp F6       &tog 1                                            &mo 3   &kp F7                &kp F8                &kp F9                 &kp F10               &kp F11                &kp F12
&trans  &trans           &trans       &trans    &trans      &trans       &none                                             &none   &kp LEFT_PARENTHESIS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans                &trans                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &none   &trans     &trans      &trans  &trans     &none   &kp CARET             &kp AMPERSAND         &kp STAR               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &trans      &trans                          &trans      &trans                     &kp LEFT              &kp DOWN              &kp UP_ARROW           &kp RIGHT             &trans                 &trans
&trans  &trans           &trans       &trans    &trans                   &trans  &kp EQUAL  &trans      &trans  &kp ENTER  &trans                        &trans                &trans                 &trans                &trans                 &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans          &trans        &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans    &trans          &trans        &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN        &kp UP_ARROW  &kp RIGHT     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans    &trans          &trans        &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans            &kp LEFT_ARROW  &kp DOWN      &kp UP_ARROW  &kp RIGHT  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
